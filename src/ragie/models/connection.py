"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from ragie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from ragie.utils import validate_const
from typing import Dict, List, Literal, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


ConnectionMetadataTypedDict = TypeAliasType(
    "ConnectionMetadataTypedDict", Union[str, int, bool, List[str]]
)


ConnectionMetadata = TypeAliasType(
    "ConnectionMetadata", Union[str, int, bool, List[str]]
)


SourceTypedDict = TypeAliasType("SourceTypedDict", Union[str, List[str]])


Source = TypeAliasType("Source", Union[str, List[str]])


class ConnectionTypedDict(TypedDict):
    id: str
    created_at: datetime
    updated_at: datetime
    metadata: Dict[str, ConnectionMetadataTypedDict]
    type: str
    name: str
    source: Nullable[SourceTypedDict]
    enabled: bool
    partition: str
    page_limit: Nullable[int]
    disabled_by_system: bool
    disabled_by_system_reason: Nullable[Literal["connection_over_total_page_limit"]]
    last_synced_at: NotRequired[Nullable[datetime]]
    syncing: NotRequired[Nullable[bool]]


class Connection(BaseModel):
    id: str

    created_at: datetime

    updated_at: datetime

    metadata: Dict[str, ConnectionMetadata]

    type: str

    name: str

    source: Nullable[Source]

    enabled: bool

    partition: str

    page_limit: Nullable[int]

    disabled_by_system: bool

    DISABLED_BY_SYSTEM_REASON: Annotated[
        Annotated[
            Nullable[Literal["connection_over_total_page_limit"]],
            AfterValidator(validate_const("connection_over_total_page_limit")),
        ],
        pydantic.Field(alias="disabled_by_system_reason"),
    ] = "connection_over_total_page_limit"

    last_synced_at: OptionalNullable[datetime] = UNSET

    syncing: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["last_synced_at", "syncing"]
        nullable_fields = [
            "source",
            "page_limit",
            "disabled_by_system_reason",
            "last_synced_at",
            "syncing",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
