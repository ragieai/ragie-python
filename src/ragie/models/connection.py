"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from pydantic import model_serializer
from ragie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing_extensions import NotRequired, TypedDict


class ConnectionMetadataMetadataTypedDict(TypedDict):
    pass


class ConnectionMetadataMetadata(BaseModel):
    pass


class ConnectionTypedDict(TypedDict):
    id: str
    created_at: datetime
    updated_at: datetime
    metadata: ConnectionMetadataMetadataTypedDict
    type: str
    name: str
    enabled: bool
    last_synced_at: NotRequired[Nullable[datetime]]
    syncing: NotRequired[Nullable[bool]]


class Connection(BaseModel):
    id: str

    created_at: datetime

    updated_at: datetime

    metadata: ConnectionMetadataMetadata

    type: str

    name: str

    enabled: bool

    last_synced_at: OptionalNullable[datetime] = UNSET

    syncing: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["last_synced_at", "syncing"]
        nullable_fields = ["last_synced_at", "syncing"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
