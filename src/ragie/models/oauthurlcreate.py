"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from pydantic import model_serializer
from ragie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing_extensions import NotRequired, TypedDict


class OAuthURLCreateMetadataTypedDict(TypedDict):
    pass


class OAuthURLCreateMetadata(BaseModel):
    pass


class Mode(str, Enum):
    HI_RES = "hi_res"
    FAST = "fast"


class OAuthURLCreateTypedDict(TypedDict):
    redirect_uri: str
    source_type: str
    metadata: NotRequired[Nullable[OAuthURLCreateMetadataTypedDict]]
    mode: NotRequired[Nullable[Mode]]
    partition: NotRequired[Nullable[str]]


class OAuthURLCreate(BaseModel):
    redirect_uri: str

    source_type: str

    metadata: OptionalNullable[OAuthURLCreateMetadata] = UNSET

    mode: OptionalNullable[Mode] = UNSET

    partition: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["metadata", "mode", "partition"]
        nullable_fields = ["metadata", "mode", "partition"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
